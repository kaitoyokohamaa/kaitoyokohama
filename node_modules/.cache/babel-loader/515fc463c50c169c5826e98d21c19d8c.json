{"ast":null,"code":"import * as actionTypes from '../actions/actions';\nconst initialState = {\n  value: [],\n  todo: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD:\n      return { ...state,\n        todo: state.todo.concat({\n          id: new Date(),\n          value: action.value\n        })\n      };\n\n    case actionTypes.CHANGE:\n      return { ...state,\n        value: state.value = action.value\n      };\n\n    case actionTypes.REMOVE:\n      const updatedArray = state.todo.filter(result => result.id !== action.deleteResult);\n      return { ...state,\n        tofdo: updatedArray\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/todo/src/store/reducers/reducer.js"],"names":["actionTypes","initialState","value","todo","reducer","state","action","type","ADD","concat","id","Date","CHANGE","REMOVE","updatedArray","filter","result","deleteResult","tofdo"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,oBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC,EADW;AAEjBC,EAAAA,IAAI,EAAE;AAFW,CAArB;;AAIC,MAAMC,OAAO,GAAE,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAiC;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKP,WAAW,CAACQ,GAAjB;AAEE,aAAO,EACL,GAAGH,KADE;AAELF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWM,MAAX,CAAkB;AAACC,UAAAA,EAAE,EAAC,IAAIC,IAAJ,EAAJ;AAAeT,UAAAA,KAAK,EAACI,MAAM,CAACJ;AAA5B,SAAlB;AAFD,OAAP;;AAIF,SAAKF,WAAW,CAACY,MAAjB;AACE,aAAO,EACL,GAAGP,KADE;AAELH,QAAAA,KAAK,EAACG,KAAK,CAACH,KAAN,GAAYI,MAAM,CAACJ;AAFpB,OAAP;;AAIA,SAAKF,WAAW,CAACa,MAAjB;AACI,YAAMC,YAAY,GAAGT,KAAK,CAACF,IAAN,CAAWY,MAAX,CAAkBC,MAAM,IAAIA,MAAM,CAACN,EAAP,KAAcJ,MAAM,CAACW,YAAjD,CAArB;AACF,aAAM,EACJ,GAAGZ,KADC;AAEJa,QAAAA,KAAK,EAACJ;AAFF,OAAN;;AAIJ;AACE,aAAOT,KAAP;AAnBJ;AAqBH,CAtBA;;AAwBD,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actions'\n\nconst initialState = {\n    value:[],\n    todo :[]\n}\n const reducer =(state = initialState, action) =>{ \n    switch(action.type) {\n      case actionTypes.ADD:\n       \n        return {\n          ...state,\n          todo: state.todo.concat({id:new Date(),value:action.value})\n        };\n      case actionTypes.CHANGE:\n        return {\n          ...state,\n          value:state.value=action.value\n        };\n        case actionTypes.REMOVE:\n            const updatedArray = state.todo.filter(result => result.id !== action.deleteResult)\n          return{\n            ...state,\n            tofdo:updatedArray\n          };\n      default:\n        return state;\n    }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}